Spring Bean Wiring 

1. Wiring the beans using a direct method call between the @Bean methods

@Configuration
public class ProjectConfig {
 
  @Bean
  public Parrot parrot() {
    Parrot p = new Parrot();
    p.setName("Koko");
    return p;
  }

  @Bean
  public Person person() {
    Person p = new Person();
    p.setName("Ella");
    p.setParrot(parrot());     ❶
    return p;
  }
}



2. Wiring the beans using the @Bean annotated method’s parameters
@Configuration
public class ProjectConfig {
 
  @Bean
  public Parrot parrot() {
    Parrot p = new Parrot();
    p.setName("Koko");
    return p;
  }
 
  @Bean
  public Person person(Parrot parrot) {     ❶
    Person p = new Person();
    p.setName("Ella");
    p.setParrot(parrot);
    return p;
  }
}

3. Using the @Autowired annotation to inject beans
	Don't have option to make the field final

	@Component
public class Person {
 
  private String name = "Ella";
 
  @Autowired   
  private final Parrot parrot;
}

4. Using @Autowired to inject the values through the constructor

@Component
public class Person {
 
  private String name = "Ella";
 
  private final Parrot parrot;    ❶
 
  @Autowired                      ❷
  public Person(Parrot parrot) {
    this.parrot = parrot;
  }
 
  // Omitted getters and setters
 
}

NOTE: Starting with Spring version 4.3, when you only have one constructor in the class, you can omit writing the @Autowired annotation.

Dealing with circular dependencies: Spring can not create Beans and will be Deadlock :No solution. Bad idea to have circular depenency 


--- Choosing from multiple beans in the Spring context
Depending on your implementation, you have the following cases:

The identifier of the parameter matches the name of one of the beans from the context (which, remember, is the same as the name of the method annotated with @Bean that returns its value). In this case, Spring will choose the bean for which the name is the same as the parameter.

The identifier of the parameter doesn’t match any of the bean names from the context. Then you have the following options:

You marked one of the beans as primary (as we discussed in chapter 2, using the @Primary annotation). In this case, Spring will select the primary bean for injection.

You can explicitly select a specific bean using the @Qualifier annotation, which we discuss in this chapter.

If none of the beans is primary and you don’t use @Qualifier, the app will fail with an exception, complaining that the context contains more beans of the same type and Spring doesn’t know which one to choose.



The following listing provides an example using the @Qualifier annotation. Observe that instead of having a specific identifier of the parameter, I now specify the bean I want to inject using the value attribute of the @Qualifier annotation.

@Bean
  public Person person(
    @Qualifier("parrot2") Parrot parrot) {    ❶
 
    Person p = new Person();
    p.setName("Ella");
    p.setParrot(parrot);
    return p;
  }

Setting qualifier for component
@Component
@Qualifier("PUSH")                           ❶
public class CommentPushNotificationProxy 
  implements CommentNotificationProxy {
  // Omitted code
}



-- @Service, @Repository & @Component 

The services are the objects with the responsibility of implementing the use cases, while repositories are the objects managing the data persistence. Because these responsibilities are so common in projects, and they are important in the class design, having a distinctive way of marking them helps the developer better understand the app design.

Spring offers us the @Service annotation to mark a component that takes the responsibility of a service and the @Repository annotation to mark a component that implements a repository responsibility (figure 4.12). All three (@Component, @Service, and @Repository) are stereotype annotations and instruct Spring to create and add an instance of the annotated class to its context.


--- Singleton Beans
--- Prototype bean : Creates new bean for everytime it is asked. 

@Repository
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
public class CommentRepository {
}